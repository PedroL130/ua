//package sam.aula05;
import java.util.ArrayList;
import java.util.List;
import java.lang.management.ThreadInfo;

class Imovel {

    private String local;
    private int rooms, price, id;
    private boolean available = true;
    private DateYMD inicioLeilao, fimLeilao;

    public Imovel(int id, int rooms, String local, int price) {
        this.id = id;
        this.rooms = rooms;
        this.local = local;
        this.price = price;
    }

    public String getLocal() {
        return local;
    }

    public int getRooms() {
        return rooms;
    }

    public int getPrice() {
        return price;
    }

    

    public DateYMD getInicioLeilao() {
        return inicioLeilao;
    }

    public DateYMD getFimLeilao() {
        return fimLeilao;
    }

    public int getId() {
        return id;
    }

    public boolean getAvailable(){
        return available;
    }

    

    public boolean available(int id) {
        return available = false;
    }

    public void setAuction(DateYMD inicio, DateYMD fim) {
        this.inicioLeilao = inicio;
        this.fimLeilao = fim;
    }

    public boolean isAuction() {
        return inicioLeilao != null && fimLeilao != null;
    }

    public String toString() {
        return String.format("Im√≥vel %d; quartos: %d; localidade: %s; pre√ßo: %d; dispon√≠vel: %s%s", id,rooms, local, price, available ? "sim" : "n√£o", this.isAuction() ? String.format("; leil√£o: %s : %s", inicioLeilao, fimLeilao) : "");
    }

}

class RealEstate{
    private List <Imovel> imoveis;
    

    public RealEstate(){
        this.imoveis = new ArrayList<>();
    }

    public void newProperty(String local, int rooms, int price) {
        int id = 1000 + imoveis.size() + 1;
        Imovel imovel = new Imovel(id, rooms, local, price);
        imoveis.add(imovel);
    }

    public void sell(int id){
        for (Imovel imovel : imoveis){
            if (imovel.getId() == id){
                imovel.available(id);
            }
        }
    }

    public void setAuction(int id, DateYMD inicioleilao,int time){
        for (Imovel imovel : imoveis){
            if (imovel!=null && imovel.getId()==id){
                if (imovel.available(id)){
                    DateYMD fim = new DateYMD(inicioleilao.getDay(), inicioleilao.getMonth(), inicioleilao.getYear());
                    fim.addDays(time);
                    imovel.setAuction(inicioleilao, fim);
                }else{
                    System.out.printf("Im√≥vel %d n√£o est√° dispon√≠vel.\n", id);
                }
            }
        }
    }

    public String toString() {
        StringBuilder result = new StringBuilder().append("Propriedades:\n");
        for (Imovel imovel : imoveis){
            if (imovel != null){
                result.append(imovel).append("\n");
            }
        }
        return result.toString();
    }
}

public class Ex3 {
    public static void main(String[] args) {
        RealEstate imobiliaria = new RealEstate();
        imobiliaria.newProperty("Gl√≥ria", 2, 30000);
        imobiliaria.newProperty("Vera Cruz", 1, 25000);
        imobiliaria.newProperty("Santa Joana", 3, 32000);
        imobiliaria.newProperty("Aradas", 2, 24000);
        imobiliaria.newProperty("S√£o Bernardo", 2, 20000);

        imobiliaria.sell(1001);
        imobiliaria.setAuction(1002, new DateYMD(21, 3, 2023), 4);
        imobiliaria.setAuction(1003, new DateYMD(1, 4, 2023), 3);
        imobiliaria.setAuction(1001, new DateYMD(1, 4, 2023), 4);
        imobiliaria.setAuction(1010, new DateYMD(1, 4, 2023), 4);

        System.out.println(imobiliaria);

    }
}
Pedro Lopes
#3419
üí™a treinar

R√∫ben Gomes ‚Äî 08/03/2023 12:05
mas ele de certeza q n quer saber
olly. ‚Äî 08/03/2023 12:05
a n√≥s n√£o √© o regente
mas deve ser safe na mesma
R√∫ben Gomes ‚Äî 08/03/2023 12:05
yaya exato
olly. ‚Äî 08/03/2023 12:06
eles sabem que copiamos naquilo e copiamos ahahah
R√∫ben Gomes ‚Äî 08/03/2023 12:06
pois lmao
lu√≠s_d ‚Äî 10/03/2023 21:21
Quantos kahoots √© que j√° fizeram?
Rended ‚Äî 10/03/2023 21:28
at√© agora foi s√≥ 1 socrative
claudspeeds ‚Äî 14/03/2023 18:28
aquilo n√∫mero do final √© o qu√™
Imagem
Ex3
Rended ‚Äî 14/03/2023 18:40
thats a good question my friend
n√≥s achamos que possa ser a dura√ß√£o em dias do leilao
Francisco ‚Äî 16/03/2023 00:11
Foi o q eu considerei, ya
Kinda tarde, mas caguei :)
JuanS12 ‚Äî 16/03/2023 13:41
Quantas faltas se pode dar a poo? @1¬∫ Ano
MP3910 ‚Äî 16/03/2023 13:42
4 acho
JOAO ‚Äî 16/03/2023 13:42
Pr√°tico 4 acho, teorico n existem faltas
Ns se s√£o 3 ou 4 mas pronto
JuanS12 ‚Äî 16/03/2023 13:42
Ok se uma pessoa faltar a 3 100% sure q n reprova certo?
JOAO ‚Äî 16/03/2023 13:43
N te consigo dzr c certeza, mas penso q n reprovas yha
Rended ‚Äî 16/03/2023 13:43
A fp reprovavas √† terceira se n√£o me engano, aqui n√£o sei
MP3910 ‚Äî 16/03/2023 13:44
Yah
olly. ‚Äî 16/03/2023 13:45
a melhor forma de saber √© perguntando a um stor ‚ò†Ô∏è
Luis Sousa ‚Äî 16/03/2023 16:29
sao 20%
normalmente 3 faltas significam q se fica chumbado
Torres ‚Äî 17/03/2023 22:01
ya √° terceira vais de vela
RafaelClaro ‚Äî 18/03/2023 14:41
alguem consegue mostrar como e que e suposto ficar o exerc 5.3 
Pankas ‚Äî 18/03/2023 14:43
No guiao mostram como √© suposto ficar
RafaelClaro ‚Äî 22/03/2023 12:15
Quando √© que √© o pr√≥ximo ‚Äúmini teste te√≥rico‚Äù algu√©m sabe?
Rended ‚Äî 22/03/2023 12:27
acho que os profs n√£o avisam disso
lu√≠s_d ‚Äî 22/03/2023 19:57
O meu stor de poo avisou e disse que era para a semana
capitao_iglooo ‚Äî 23/03/2023 15:06
alguem fez a 5.2 do guiao 5?
Rended ‚Äî 23/03/2023 15:13
https://github.com/TiagoRG/uaveiro-leci/blob/master/1ano/2semestre/poo/src/aula05/Calendar.java
GitHub
uaveiro-leci/Calendar.java at master ¬∑ TiagoRG/uaveiro-leci
Material do curso de LECI. Contribute to TiagoRG/uaveiro-leci development by creating an account on GitHub.
uaveiro-leci/Calendar.java at master ¬∑ TiagoRG/uaveiro-leci
olly. ‚Äî Ontem √†s 11:35
de nada malta
Imagem
Mariano ‚Äî Ontem √†s 11:35
Rei
J0KAj ‚Äî Ontem √†s 11:36
üëë
olly. ‚Äî Ontem √†s 11:37
j√° mando os c√≥digos
public interface ILibrary {
    public void addItem(LibraryItem item);
    public void removeItem(LibraryItem item);
    public LibraryItem searchForItem(String title);
    public boolean borrowItem(int itemId);
    public boolean returnItem(int itemId);
Expandir
ILibrary.java
1 KB
import java.util.Scanner;

public class LibraryMain {
    public static void main(String[] args) {
        ILibrary library = new Library();
        Scanner scanner = new Scanner(System.in);
Expandir
LibraryMain.java
2 KB
X1COj ‚Äî Ontem √†s 11:45
Crie uma solu√ß√£o para gest√£o de uma biblioteca, onde ser√£o registados os dados de cada item na biblioteca, que podem ser livros ou DVDs, e indica√ß√£o sobre se est√£o dispon√≠veis.
A solu√ß√£o deve permitir adicionar e remover itens √† biblioteca, atrav√©s de um menu, dever√° ser poss√≠vel procurar um item, pelo nome e, no caso de existir, imprimir as suas informa√ß√µes, dever√° tamb√©m ser poss√≠vel imprimir as informa√ß√µes de todos os itens.
Deve definir as classes, incluindo os construtores e m√©todos seletores(getters) e/ou modificadores(setters) que considere necess√°rios, os m√©todos toString, equals e hashCode, para al√©m dos restantes m√©todos necess√°rios √†s funcionalidades, de acordo com as seguintes informa√ß√µes:

LibraryItem - representa um item, que pode ser livro (book) ou DVD, que tem associado um identificador, titulo (title), disponibilidde, e nome do utilizador que pede o empr√©stimo, e o m√©todo return;
Book - inclui informa√ß√£o do autor;
DVD - inclui a dura√ß√£o;
Library - permite criar e gerir os itens da biblioteca.
olly. ‚Äî Ontem √†s 11:59
quem tem pratica com o stor que deu tp hoje √†s 9, parece muito tranquilo vir aqui, chat gpt e essas coisas
pelo menos para j√°
X1COj ‚Äî Ontem √†s 13:20
Tiveram que apresentar alguma merda ou dizer o que fizeram?
RafaelClaro ‚Äî Ontem √†s 13:38
pq e que usaste um interface em vez de class?
olly. ‚Äî Ontem √†s 13:51
esses programas s√£o logo dados, eu n√£o tinha mudado nada ainda
tudo o que est√° √© dado inicialmente
Luis Sousa ‚Äî Ontem √†s 15:18
Crie uma solu√ß√£o para gest√£o de um abrigo para animais de companhia, onde s√£o registados
c√£es, coelhos ou p√°ssaros.

A solu√ß√£o deve permitir adicionar e remover animais e tamb√©m associar um padrinho a um
animal, atrav√©s do identificador do animal; dever√° ser poss√≠vel procurar um animal, pelo
nome, e no caso de existir imprimir a sua informa√ß√£o; dever√° tamb√©m ser possivel imprimir as
Expandir
enunciado.txt
2 KB
o enunciado da P3 
o enunciado muda de turma para turma, mas os exercicios sao bastante parecidos
narciso ‚Äî Ontem √†s 15:46
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
Expandir
Main.java
2 KB
public interface IPetShelter {
    public void addAnimal(Animal animal);
    public void removeAnimal(Animal animal);
    public Animal searchForAnimal(String name);
    public boolean sponsorAnimal(int animalId);
    void listAllAnimals();
Expandir
IPetShelter.java
1 KB
francisco04 ‚Äî Hoje √†s 15:13
Crie um programa em java para gest√£o das plantas de um parque de cidade onde s√£o registados todas as plantas de maior porte: arvores, arbustos e palmeiras.


A solu√ß√£o deve permitir adicionar e remover plantas e tamb√©m associar um patrocinador (sponsor) a uma
planta, atrav√©s do identificador da planta; dever√° ser poss√≠vel procurar uma planta, pela
especie, e no caso de existir imprimir a sua informa√ß√£o de todas as especies; dever√° tamb√©m ser possivel imprimir as
informa√ß√µes de todas as plantas registadas no parque, devera ainda ser possivel mostar uam lista das especies registadas bem como o respetivo numero de exemplares

Deve definir as classes, incluindo os construtores e m√©todos seletores (getters) e/ou
modificadores (setters) que considere necess√°rios, os m√©todos toString, equals e hashCode,
para al√©m dos restantes m√©todos necess√°rios √†s funcionalidades, de acordo com as seguintes
informa√ß√µes:
‚Ä¢ plant - representa uma planta, que pode ser classificada como arvore (tree), arbustro (shrub), ou palmeira (palmtree), com identificador unico e informa√ßao da especie, altura, idade, e nome do patrocinador, se existir;
‚Ä¢ tree-inclui informa√ß√£o se √© de folha perene (evergreen);
‚Ä¢ shrub - inclui informa√ß√£o se d√° flor e se sim a respetiva cor:
.palmtree- inclui informa√ß√£o do habitat, que pode ser semi-desertico ou temperado;
.ParkManager- permite fazer a gest√£o dos registos das plantas do parque;
import java.util.Scanner;

public class Main {

    public void addPlant(Plant plant);
        private int id;
        private String title;
        private boolean available;
        private String borrowerName;


    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        ParkManager pManager = new ParkManager("Serralves");

        int choice = 0;
        do {
            System.out.println("Choose an option:");
            System.out.println("1. Add plant");
            System.out.println("2. Remove plant");
            System.out.println("3. Search for species");
            System.out.println("4. Sponsor a plant");
            System.out.println("5. View all plants");
            System.out.println("6. Summary of species");
            System.out.println("7. Exit");

            choice = scanner.nextInt();

            switch (choice) {
                case 1:
		            // adicionar planta
                case 2:
                    // remover planta
                case 3:
                    // procurar planta
                case 4:
                    // patrocinar planta
                case 5:
                    // imprimir a informa√ß√£o de todas as plantas
                case 6:
                    // imprimir resumo com a informa√ß√£o relativa a todas
                    // especies
                case 7:
                    System.out.println("Goodbye!");
                    break;
                default:
                    // imprimir mensagem de erro
            }

        } while (choice != 7);
    }
}
@Override
    public abstract String toString();

    @Override
    public abstract boolean equals(Object obj);

    @Override
    public abstract int hashCode();
}



package AvaliacaoAula;

public abstract class Plant {
    private int id;
    private String species;
    private double height;
    private int age;
    private String sponsor;

    public Plant(int id, String species, double height, int age) {
        this.id = id;
        this.species = species;
        this.height = height;
        this.age = age;
        this.sponsor = null;
    }

    public int getId() {
        return id;
    }

    public String getSpecies() {
        return species;
    }

    public double getHeight() {
        return height;
    }

    public int getAge() {
        return age;
    }

    public String getSponsor() {
        return sponsor;
    }
... (43 linhas)
Recolher
Main.java
5 KB
public interface IParkManager {
    public void addPlant(Plant plant);
    public void removePlant(Plant plant);
    public void searchForSpecies(String name);
    public boolean sponsorPlant(int plantId);
    public void listAllPlants();
    public void listSummarySpecies();
}
Recolher
IParkManager.java
1 KB
Ôªø
import java.util.Scanner;

public class Main {

    public void addPlant(Plant plant);
        private int id;
        private String title;
        private boolean available;
        private String borrowerName;


    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        ParkManager pManager = new ParkManager("Serralves");

        int choice = 0;
        do {
            System.out.println("Choose an option:");
            System.out.println("1. Add plant");
            System.out.println("2. Remove plant");
            System.out.println("3. Search for species");
            System.out.println("4. Sponsor a plant");
            System.out.println("5. View all plants");
            System.out.println("6. Summary of species");
            System.out.println("7. Exit");

            choice = scanner.nextInt();

            switch (choice) {
                case 1:
		            // adicionar planta
                case 2:
                    // remover planta
                case 3:
                    // procurar planta
                case 4:
                    // patrocinar planta
                case 5:
                    // imprimir a informa√ß√£o de todas as plantas
                case 6:
                    // imprimir resumo com a informa√ß√£o relativa a todas
                    // especies
                case 7:
                    System.out.println("Goodbye!");
                    break;
                default:
                    // imprimir mensagem de erro
            }

        } while (choice != 7);
    }
}
@Override
    public abstract String toString();

    @Override
    public abstract boolean equals(Object obj);

    @Override
    public abstract int hashCode();
}



package AvaliacaoAula;

public abstract class Plant {
    private int id;
    private String species;
    private double height;
    private int age;
    private String sponsor;

    public Plant(int id, String species, double height, int age) {
        this.id = id;
        this.species = species;
        this.height = height;
        this.age = age;
        this.sponsor = null;
    }

    public int getId() {
        return id;
    }

    public String getSpecies() {
        return species;
    }

    public double getHeight() {
        return height;
    }

    public int getAge() {
        return age;
    }

    public String getSponsor() {
        return sponsor;
    }

    public void setHeight(double height) {
        this.height = height;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public void setSponsor(String sponsor) {
        this.sponsor = sponsor;
    }

    @Override
    public abstract String toString();

    @Override
    public abstract boolean equals(Object obj);

    @Override
    public abstract int hashCode();
}



Crie uma solu√ß√£o para gest√£o das plantas de um parque de cidade onde s√£o registados todas as plantas de maior porte: arvores, arbustos e palmeiras.


A solu√ß√£o deve permitir adicionar e remover plantas e tamb√©m associar um patrocinador (sponsor) a uma
planta, atrav√©s do identificador da planta; dever√° ser poss√≠vel procurar uma planta, pela
especie, e no caso de existir imprimir a sua informa√ß√£o de todas as especies; dever√° tamb√©m ser possivel imprimir as
informa√ß√µes de todas as plantas registadas no parque, devera ainda ser possivel mostar uam lista das especies registadas bem como o respetivo numero de exemplares

Deve definir as classes, incluindo os construtores e m√©todos seletores (getters) e/ou
modificadores (setters) que considere necess√°rios, os m√©todos toString, equals e hashCode,
para al√©m dos restantes m√©todos necess√°rios √†s funcionalidades, de acordo com as seguintes
informa√ß√µes:
‚Ä¢ plant - representa uma planta, que pode ser classificada como arvore (tree), arbustro (shrub), ou palmeira (palmtree), com identificador unico e informa√ßao da especie, altura, idade, e nome do patrocinador, se existir;
‚Ä¢ tree-inclui informa√ß√£o se √© de folha perene (evergreen);
‚Ä¢ shrub - inclui informa√ß√£o se d√° flor e se sim a respetiva cor:
.palmtree- inclui informa√ß√£o do habitat, que pode ser semi-desertico ou temperado;
.ParkManager- permite fazer a gest√£o dos registos das plantas do parque;
Main.java
5 KB